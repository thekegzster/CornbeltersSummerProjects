---
title: "updateYakkertech"
format: html
---

```{r}
library(tidyverse)
library(mgcv)
library(purrr)
```

Import all Yakkertech Data
```{r}
#Point these to the folders where you have all of the yakkertech data from github
kcl_all_files <- list.files(
  path        = "/Users/charl/OneDrive/Documents/Cornbelters/CornbeltersSummerProjects/YakkertechData/kclData",
  pattern     = "\\.csv$",
  full.names  = TRUE
)

belters_all_files <- list.files(
  path        = "/Users/charl/OneDrive/Documents/Cornbelters/CornbeltersSummerProjects/YakkertechData/CornBeltersData",
  pattern     = "\\.csv$",
  full.names  = TRUE
)

kcl_list_dfs <- kcl_all_files |> 
  map(read_csv)

belters_list_dfs <- belters_all_files |> 
  map(read_csv)

#Create dataframes with combined yakkertech data for both leagues
KCLyakkertechData <- bind_rows(kcl_list_dfs)
BeltersyakkertechData <- bind_rows(belters_list_dfs)
```


Fix all yakkertech naming mistakes
```{r}
corrections <- c(
  "Justin Trusner" = "Jacob Trusner",
  "Brooks Neuhof" = "Brooks Neuhoff",
  "Teagan Disharoom" = 	"Teagan Disharoon",
  "Kam  Ross" = "Kam Ross",
  "Brayden  Windy" = "Brayden Windy",
  "Sammy Descarpentrie" = "Sam DesCarpentrie",
  "Kannan Kleine" = "Kannon Kleine",
  "Nolan Mccrossin" = "Nolan McCrossin",
  "Luke Mcclure" = "Luke McClure",
  "Brandown Ward" = "Brandon Ward",
  "Cameron Heinold" = "Camden Heinold",
  "Sammy Driscoll" = "Sam Driscoll",
  "Roy Rolston" = "Roy Ralston",
  "Tyson Sorenson" = "Tysen Sorenson",
  "Chase Peterson" = "Chase Petersen"
)

fixNames <- function(df, column, lookup){
  old_values <- df[[column]]
  needs_fix <- old_values %in% names(lookup)
  df[[column]] <- ifelse(
    needs_fix,
    lookup[old_values],
    old_values
  )
  return(df)
}

KCLyakkertechData <- fixNames(KCLyakkertechData, "Batter", corrections)
KCLyakkertechData <- fixNames(KCLyakkertechData, "Pitcher", corrections)


BeltersyakkertechData <- BeltersyakkertechData |> 
  filter(BatterTeam == "Normal cornbelters")

BeltersyakkertechData <- fixNames(BeltersyakkertechData, "Batter", corrections)
BeltersyakkertechData <- fixNames(BeltersyakkertechData, "Pitcher", corrections)
```


Create columns for if it was a strike and if they swung
```{r}
#Fix Play Result Walk and HBP Issue
KCLyakkertechData <- KCLyakkertechData |>
  mutate(
    PlayResult = ifelse(!is.na(KorBB) & KorBB == "Walk", "Walk", PlayResult),
    PlayResult = ifelse(!is.na(PitchCall) & PitchCall == "HitByPitch", "HitByPitch", PlayResult)
  )

BeltersyakkertechData <- BeltersyakkertechData |>
  mutate(
    PlayResult = ifelse(!is.na(KorBB) & KorBB == "Walk", "Walk", PlayResult),
    PlayResult = ifelse(!is.na(PitchCall) & PitchCall == "HitByPitch", "HitByPitch", PlayResult)
  )

#Creates IsStrike and IsSwing columns for both dataframes
KCLyakkertechData <- KCLyakkertechData |> 
  mutate(
      IsStrike = PlateLocHeight >= 1.5 &
                    PlateLocHeight <= 3.5 &
                    PlateLocSide   >= -1 &
                    PlateLocSide   <=  1
    ) |> 
  mutate(
    IsSwing = PitchCall == "InPlay" |
              PitchCall == "StrikeSwinging" |
              PitchCall == "Foul"
  )

BeltersyakkertechData <- BeltersyakkertechData |> 
  mutate(
      IsStrike = PlateLocHeight >= 1.5 &
                    PlateLocHeight <= 3.5 &
                    PlateLocSide   >= -1 &
                    PlateLocSide   <=  1
    ) |> 
  mutate(
    IsSwing = PitchCall == "InPlay" |
              PitchCall == "StrikeSwinging" |
              PitchCall == "Foul"
  )

```


Creates a column for the zone of each pitch
```{r}
KCLyakkertechData <- KCLyakkertechData |> 
  mutate(
      zone = case_when(
        PlateLocHeight > 2.833333 & PlateLocHeight <= 3.5 & PlateLocSide >= -1 & PlateLocSide <= -.3333333           ~ 1,
        PlateLocHeight > 2.833333 & PlateLocHeight <= 3.5 & PlateLocSide > -.3333333 & PlateLocSide <= .3333333      ~ 2,
        PlateLocHeight > 2.833333 & PlateLocHeight <= 3.5 & PlateLocSide > .3333333 & PlateLocSide <= 1              ~ 3,
        PlateLocHeight > 2.1666666 & PlateLocHeight <= 2.833333 & PlateLocSide >= -1 & PlateLocSide <= -.3333333      ~ 4,
        PlateLocHeight > 2.1666666 & PlateLocHeight <= 2.833333 & PlateLocSide > -.3333333 & PlateLocSide <= .3333333 ~ 5,
        PlateLocHeight > 2.1666666 & PlateLocHeight <= 2.833333 & PlateLocSide > .3333333 & PlateLocSide <= 1         ~ 6,
        PlateLocHeight >= 1.5 & PlateLocHeight <= 2.1666666 & PlateLocSide >= -1 & PlateLocSide <= -.3333333          ~ 7,
        PlateLocHeight >= 1.5 & PlateLocHeight <= 2.1666666 & PlateLocSide > -.3333333 & PlateLocSide <= .3333333     ~ 8,
        PlateLocHeight >= 1.5 & PlateLocHeight <= 2.1666666 & PlateLocSide > .3333333 & PlateLocSide <= 1             ~ 9,
        TRUE ~ NA_integer_
      )
    )

BeltersyakkertechData <- BeltersyakkertechData |> 
  mutate(
      zone = case_when(
        PlateLocHeight > 2.833333 & PlateLocHeight <= 3.5 & PlateLocSide >= -1 & PlateLocSide <= -.3333333           ~ 3,
        PlateLocHeight > 2.833333 & PlateLocHeight <= 3.5 & PlateLocSide > -.3333333 & PlateLocSide <= .3333333      ~ 2,
        PlateLocHeight > 2.833333 & PlateLocHeight <= 3.5 & PlateLocSide > .3333333 & PlateLocSide <= 1              ~ 1,
        PlateLocHeight > 2.1666666 & PlateLocHeight <= 2.833333 & PlateLocSide >= -1 & PlateLocSide <= -.3333333      ~ 6,
        PlateLocHeight > 2.1666666 & PlateLocHeight <= 2.833333 & PlateLocSide > -.3333333 & PlateLocSide <= .3333333 ~ 5,
        PlateLocHeight > 2.1666666 & PlateLocHeight <= 2.833333 & PlateLocSide > .3333333 & PlateLocSide <= 1         ~ 4,
        PlateLocHeight >= 1.5 & PlateLocHeight <= 2.1666666 & PlateLocSide >= -1 & PlateLocSide <= -.3333333          ~ 9,
        PlateLocHeight >= 1.5 & PlateLocHeight <= 2.1666666 & PlateLocSide > -.3333333 & PlateLocSide <= .3333333     ~ 8,
        PlateLocHeight >= 1.5 & PlateLocHeight <= 2.1666666 & PlateLocSide > .3333333 & PlateLocSide <= 1             ~ 7,
        TRUE ~ NA_integer_
      )
    )

```

Creates a column Pitch Category based on the type of pitch
```{r}
KCLyakkertechData <- KCLyakkertechData |> 
  mutate(
    PitchCategory = case_when(
      TaggedPitchType %in% c("Cutter", "Fastball", "Sinker") ~ "Fastball",
      TaggedPitchType %in% c("Changeup", "Splitter") ~ "Offspeed",
      TaggedPitchType %in% c("Curveball", "Slider") ~ "Breaking",
      TRUE ~ "Other"
    )
  ) |> 
  mutate(
    bases = case_when(
      PlayResult == "Single" ~ 1,
      PlayResult == "Double" ~ 2,
      PlayResult == "Triple" ~ 3,
      PlayResult == "HomeRun" ~ 4,
      TRUE ~ 0
    )
  )

BeltersyakkertechData <- BeltersyakkertechData |> 
  mutate(
    PitchCategory = case_when(
      TaggedPitchType %in% c("Cutter", "Fastball", "Sinker") ~ "Fastball",
      TaggedPitchType %in% c("Changeup", "Splitter") ~ "Offspeed",
      TaggedPitchType %in% c("Curveball", "Slider") ~ "Breaking",
      TRUE ~ "Other"
    )
  ) |> 
  mutate(
    bases = case_when(
      PlayResult == "Single" ~ 1,
      PlayResult == "Double" ~ 2,
      PlayResult == "Triple" ~ 3,
      PlayResult == "HomeRun" ~ 4,
      TRUE ~ 0
    )
  )
```


Initialize all Models trained on savant data
```{r}
savant <- read_csv("savantData25.csv")

set.seed(42)

fit_xba <- gam(
  expected_babip ~ te(launch_speed, launch_angle),
  data = savant,
  family = gaussian(),
  method = "REML"
)

fit_xwoba <- gam(
  expected_woba ~ te(launch_speed, launch_angle),
  data = savant,
  family = gaussian(),
  method = "REML"
)

fit_xslg <- gam(
  estimated_slg_using_speedangle ~ te(launch_speed, launch_angle),
  data = savant,
  family = gaussian(),
  method = "REML"
)


```

Calculate Expected Batting Average
```{r}
#For KCL
KCLyakkertechData <- KCLyakkertechData |> 
  mutate(row_id = row_number())

modelYakkertechData <- KCLyakkertechData |> 
  select(row_id, ExitSpeed, Angle) |> 
  filter(!is.na(ExitSpeed) & !is.na(Angle)) |> 
  rename(
    launch_speed = ExitSpeed,
    launch_angle = Angle
  )

savant <- savant |> 
  filter(!is.na(launch_speed) & !is.na(launch_angle)) |> 
  filter(expected_babip > 0 & expected_babip < 1)

modelYakkertechData$predicted_xba <- predict(fit_xba, newdata = modelYakkertechData)
modelYakkertechData$predicted_xba <- pmax(0.0001, modelYakkertechData$predicted_xba)

KCLyakkertechData <- KCLyakkertechData |> 
  left_join(
    modelYakkertechData |> select(row_id, predicted_xba),
    by = "row_id"
  )

```

```{r}
#FOr Belters
BeltersyakkertechData <- BeltersyakkertechData |> 
  mutate(row_id = row_number())

modelYakkertechData <- BeltersyakkertechData |> 
  select(row_id, ExitSpeed, Angle) |> 
  filter(!is.na(ExitSpeed) & !is.na(Angle)) |> 
  rename(
    launch_speed = ExitSpeed,
    launch_angle = Angle
  )

savant <- savant |> 
  filter(!is.na(launch_speed) & !is.na(launch_angle)) |> 
  filter(expected_babip > 0 & expected_babip < 1)

modelYakkertechData$predicted_xba <- predict(fit_xba, newdata = modelYakkertechData)
modelYakkertechData$predicted_xba <- pmax(0.0001, modelYakkertechData$predicted_xba)

BeltersyakkertechData <- BeltersyakkertechData |> 
  left_join(
    modelYakkertechData |> select(row_id, predicted_xba),
    by = "row_id"
  )

```

Calculate Expected wOBA
```{r}
#For KCL
modelYakkertechData <- KCLyakkertechData |> 
  select(row_id, ExitSpeed, Angle) |> 
  filter(!is.na(ExitSpeed) & !is.na(Angle)) |> 
  rename(
    launch_speed = ExitSpeed,
    launch_angle = Angle
  )

modelYakkertechData$predicted_xwoba <- predict(fit_xwoba, newdata = modelYakkertechData)
modelYakkertechData$predicted_xwoba <- pmax(0.0001, modelYakkertechData$predicted_xwoba)

KCLyakkertechData <- KCLyakkertechData |> 
  left_join(
    modelYakkertechData |> select(row_id, predicted_xwoba),
    by = "row_id"
  )

KCLyakkertechData <- KCLyakkertechData |> 
  mutate(predicted_xwoba = case_when(
    KorBB == "Walk" | PlayResult == "Walk" ~ 0.695,
    PlayResult == "HitByPitch" ~ .72,
    TRUE ~ predicted_xwoba
  ))

```

```{r}
#For Belters
modelYakkertechData <- BeltersyakkertechData |> 
  select(row_id, ExitSpeed, Angle) |> 
  filter(!is.na(ExitSpeed) & !is.na(Angle)) |> 
  rename(
    launch_speed = ExitSpeed,
    launch_angle = Angle
  )

modelYakkertechData$predicted_xwoba <- predict(fit_xwoba, newdata = modelYakkertechData)
modelYakkertechData$predicted_xwoba <- pmax(0.0001, modelYakkertechData$predicted_xwoba)

BeltersyakkertechData <- BeltersyakkertechData |> 
  left_join(
    modelYakkertechData |> select(row_id, predicted_xwoba),
    by = "row_id"
  )

BeltersyakkertechData <- BeltersyakkertechData |> 
  mutate(predicted_xwoba = case_when(
    KorBB == "Walk" | PlayResult == "Walk" ~ 0.3,
    PlayResult == "HitByPitch" ~ 0.3,
    TRUE ~ predicted_xwoba
  ))

```


Calculate Expected SLG
```{r}
#For KCL
modelYakkertechData <- KCLyakkertechData |> 
  select(row_id, ExitSpeed, Angle) |> 
  filter(!is.na(ExitSpeed) & !is.na(Angle)) |> 
  rename(
    launch_speed = ExitSpeed,
    launch_angle = Angle
  )

modelYakkertechData$predicted_xslg <- predict(fit_xslg, newdata = modelYakkertechData)
modelYakkertechData$predicted_xslg <- pmax(0.0001, modelYakkertechData$predicted_xslg)


KCLyakkertechData <- KCLyakkertechData |> 
  left_join(
    modelYakkertechData |> select(row_id, predicted_xslg),
    by = "row_id"
  )

KCLyakkertechData <- KCLyakkertechData |> 
  mutate(predicted_xba = replace_na(predicted_xba, 0),
         predicted_xwoba = replace_na(predicted_xwoba, 0),
         predicted_xslg = replace_na(predicted_xslg, 0))
```

```{r}
#For Belters
modelYakkertechData <- BeltersyakkertechData |> 
  select(row_id, ExitSpeed, Angle) |> 
  filter(!is.na(ExitSpeed) & !is.na(Angle)) |> 
  rename(
    launch_speed = ExitSpeed,
    launch_angle = Angle
  )

modelYakkertechData$predicted_xslg <- predict(fit_xslg, newdata = modelYakkertechData)
modelYakkertechData$predicted_xslg <- pmax(0.0001, modelYakkertechData$predicted_xslg)

BeltersyakkertechData <- BeltersyakkertechData |> 
  left_join(
    modelYakkertechData |> select(row_id, predicted_xslg),
    by = "row_id"
  )

BeltersyakkertechData <- BeltersyakkertechData |> 
  mutate(predicted_xba = replace_na(predicted_xba, 0),
         predicted_xwoba = replace_na(predicted_xwoba, 0),
         predicted_xslg = replace_na(predicted_xslg, 0))
```

Add Index Row and change date format
```{r}
#Add Index Row
yakkertechData <- bind_rows(KCLyakkertechData, BeltersyakkertechData)
yakkertechData <- yakkertechData |> 
  mutate(Date = mdy(Date)) |> 
  arrange(Date, Time) |> 
  mutate(Index = row_number()) |> 
  filter(!is.na(Date) & !is.na(Time))
```

Create Rolling xWOBA
```{r}
rollingXWOBA <- yakkertechData |> 
  filter(!is.na(PlayResult)) |> 
  filter(!(PlayResult %in% c("Single", "Double", "Triple", "HomeRun", "Out", "Error") & is.na(Angle) & is.na(ExitSpeed))) |> 
  arrange(Batter, Date, Time) |> 
  group_by(Batter) |> 
   mutate(
    PlayerPA = row_number(),
    rolling_xwOBA = rollapplyr(
      predicted_xwoba,
      width = 100,
      FUN = mean,
      fill = NA,
      partial = TRUE
    )
  ) |> 
  ungroup() |> 
  select(Index, PlayerPA, rolling_xwOBA)

yakkertechData <- yakkertechData |> 
  left_join(rollingXWOBA, by = "Index")
```

Save Data
```{r}
write_csv(KCLyakkertechData, "KCLYakkertechData.csv")
write_csv(BeltersyakkertechData, "BeltersYakkertechData.csv")
write_csv(yakkertechData, "YakkertechData.csv")
```









